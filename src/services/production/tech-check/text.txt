// ✅ Approve Multiple Documents
techCheckRouter.post(
  "/leadId/:leadId/vendorId/:vendorId/userId/:userId/documents/approve",
  TechCheckController.approveMultipleDocuments
);

// ✅ Approve Multiple Documents
  public static approveMultipleDocuments = async (
    req: Request,
    res: Response
  ) => {
    try {
      const vendorId = parseInt(req.params.vendorId);
      const leadId = parseInt(req.params.leadId);
      const userId = parseInt(req.params.userId);
      const { approvedDocs } = req.body;

      if (!vendorId || !leadId || !userId) {
        return res.status(400).json({
          success: false,
          message: "Vendor ID, Lead ID, and User ID are required",
        });
      }

      if (!approvedDocs || !Array.isArray(approvedDocs)) {
        return res.status(400).json({
          success: false,
          message: "approvedDocs array is required",
        });
      }

      const result = await techCheckService.approveMultipleDocuments(
        vendorId,
        leadId,
        userId,
        approvedDocs
      );

      return res.status(200).json({
        success: true,
        message: "Selected documents approved successfully",
        data: result,
      });
    } catch (error: any) {
      console.error(
        "[TechCheckController] approveMultipleDocuments Error:",
        error
      );
      return res.status(500).json({
        success: false,
        message: error.message || "Internal server error",
      });
    }
  };

// ✅ Approve Multiple Documents (Tech Check)
  public async approveMultipleDocuments(
    vendorId: number,
    leadId: number,
    userId: number,
    approvedDocs: number[]
  ) {
    return await prisma.$transaction(async (tx) => {
      // 1️⃣ Validate & Resolve account_id
      const accountId = (
        await tx.leadMaster.findUnique({
          where: { id: leadId },
          select: { account_id: true },
        })
      )?.account_id!;

      // 2️⃣ Update the provided documents’ tech_check_status to APPROVED
      const updateRes = await tx.leadDocuments.updateMany({
        where: {
          id: { in: approvedDocs },
          vendor_id: vendorId,
          documentType: {
            tag: { in: ["Type 11", "Type 12"] },
          },
        },
        data: { tech_check_status: "APPROVED" },
      });

      // 3️⃣ Create a main detailed log entry
      const detailedLog = await tx.leadDetailedLogs.create({
        data: {
          vendor_id: vendorId,
          lead_id: leadId,
          account_id: accountId,
          action: `Tech check approved ${approvedDocs.length} documents`,
          action_type: "UPDATE",
          created_by: userId,
        },
      });

      // 4️⃣ Create corresponding document logs linked to this detailed log
      if (approvedDocs.length > 0) {
        const docLogsData = approvedDocs.map((docId) => ({
          vendor_id: vendorId,
          lead_id: leadId,
          account_id: accountId,
          doc_id: docId,
          lead_logs_id: detailedLog.id,
          created_by: userId,
        }));

        await tx.leadDocumentLogs.createMany({ data: docLogsData });
      }

      return {
        approvedDocsRequested: approvedDocs.length,
        approvedDocsUpdated: updateRes.count,
        detailedLogId: detailedLog.id,
      };
    });
  }

Frontend API / Hook

// ✅ --- Approve Multiple Documents ---
export const approveMultipleDocuments = async ({
  vendorId,
  leadId,
  userId,
  approvedDocs,
}: {
  vendorId: number;
  leadId: number;
  userId: number;
  approvedDocs: number[];
}) => {
  const { data } = await apiClient.post(
    `/leads/production/tech-check/leadId/${leadId}/vendorId/${vendorId}/userId/${userId}/documents/approve`,
    { approvedDocs }
  );
  return data;
};

export const useApproveMultipleDocuments = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: approveMultipleDocuments,
    onSuccess: async (_, variables) => {
      toast.success("Selected documents approved successfully!");
      // Refresh the tech-check leads and client-doc details
      await Promise.all([
        queryClient.invalidateQueries({ queryKey: ["techCheckLeads"] }),
        queryClient.invalidateQueries({ queryKey: ["clientDocumentationDetails"] }),
      ]);
    },
    onError: (error: any) => {
      toast.error(error?.response?.data?.message || "Document approval failed");
    },
  });
};